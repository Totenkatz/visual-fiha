{"version":3,"sources":["webpack:///./controller-app.js"],"names":[],"mappings":";;;;;;AAAA;;AAEA,wBAIA;AACA,wBAGA;AACA,mDAEA;AACA,mDASA;AACA,mDAEA;AACA,mDASA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,+DAA+D,GAAG,cAAc;AAC5H;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,+BAA+B;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA,kDAAkD;AAClD;AACA,KAAK;AACL;AACA;AACA,KAAK;;;AAGL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mEAAmE;;AAEnE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8CAA8C,+BAA+B;AAC7E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL,qCAAqC,iBAAiB;AACtD,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,CAAC;;;AAGD;AACA;AACA,CAAC;;AAED;AACA,CAAC;AACD,CAAC;AACD,CAAC;AACD,CAAC;AACD,CAAC;AACD,CAAC,iE","file":"controller-build.js","sourcesContent":["'use strict';\n\nrequire.ensure([\n  'lodash.assign',\n  'ampersand-state',\n  'ampersand-collection'\n], function() {\nrequire.ensure([\n  'ampersand-view',\n  'ampersand-view-switcher'\n], function() {\nrequire.ensure([\n  './mapping/data',\n], function() {\nrequire.ensure([\n  './layer/state',\n  './layer/svg/state',\n  './layer/img/state',\n  './layer/txt/state',\n  './layer/p5/state',\n  './layer/threejs/state',\n  './layer/video/state',\n  './layer/canvas/state',\n], function() {\nrequire.ensure([\n  './screen/state',\n], function() {\nrequire.ensure([\n  './controller/settings',\n  './layer/canvas/scripts',\n  './midi/state',\n  './midi/view',\n  './signal/control-view',\n  './signal/beat/control-view',\n  './signal/hsla/control-view',\n  './signal/rgba/control-view'\n], function(require) {\n// ---------------------------------------------------------------\n\n\n\n// almost unique id\nfunction auid() {\n  return parseInt((Math.random() + '.' + performance.now()).replace(/\\./g, ''), 10);\n}\nvar LoadedWorker = require('worker-loader?name=worker-build.js!./web-worker.js');\nvar ControllerView = require('./controller/view');\nvar ScreenState = require('./screen/state');\nvar MIDIAccessState = require('./midi/state');\nvar Mappings = require('./mapping/data');\nvar Tour = require('./controller/tour/index');\nvar fromYaml = require('./utils/yaml-to-setup');\n\nvar DetailsView = require('./layer/details-view');\nvar Settings = require('./controller/settings');\n\nvar SignalCollection = require('./signal/collection');\n\n\n// var _executedCommands = [];\n\nvar AppRouter = require('ampersand-router').extend({\n  _workerInit: false,\n\n  _handleBroadcastMessages: function(evt) {\n    var router = this;\n    var screen = router.model;\n    var layers = screen.layers;\n    var command = evt.data.command;\n    var payload = evt.data.payload || {};\n\n    switch (command) {\n      case 'bootstrap':\n        layers.reset(payload.layers || []);\n        break;\n\n      case 'updateLayers':\n        layers.set(payload.layers);\n        break;\n\n      case 'updateLayer':\n        layers.get(payload.layer.name).set(payload.layer);\n        break;\n\n      case 'addLayer':\n        layers.add(payload.layer);\n        var model = layers.get(payload.layer.name);\n        router.view.showDetails(new DetailsView({\n          parent: router.view.layersView,\n          model: model\n        }));\n        break;\n\n      case 'updateLayers':\n        layers.set(payload.layers);\n        break;\n\n      case 'heartbeat':\n        screen.clock.set(payload.clock);\n        break;\n\n      default:\n        console.info('unrecognized broadcast command \"%s\"', command);\n    }\n    router.trigger('app:broadcast:' + command, payload);\n  },\n\n  _handleWorkerMessages: function(evt) {\n    var router = this;\n    var screen = router.model;\n    var signals = router.signals;\n    var mappings = router.mappings;\n    var layers = screen.layers;\n    var command = evt.data.command;\n    var payload = evt.data.payload || {};\n\n    switch (command) {\n      case 'health':\n        router.view.workerPerformance = `~${ ((payload.samplesCount / payload.elapsed) * 1000).toFixed(2) }/${ payload.fps }fps`;\n        break;\n\n      case 'updateLayer':\n        layers.get(payload.layer.name).set(payload.layer);\n        break;\n\n      case 'addSignal':\n        signals.add(payload.signal);\n        router.view.showDetails(new DetailsView({\n          parent: router.view.signalsView,\n          model: signals.get(payload.signal.name)\n        }));\n        break;\n      case 'updateSignalResult':\n        signals.get(payload.name).workerResult = payload.workerResult;\n        break;\n      case 'updateSignal':\n        signals.get(payload.signal.name).set(payload.signal);\n        break;\n      case 'updateSignals':\n        signals.set(payload.signals);\n        break;\n      case 'removeSignal':\n        signals.remove(payload.name);\n        break;\n\n      case 'addMapping':\n        mappings.add(payload.mapping);\n        break;\n      case 'updateMapping':\n        var mappingState = mappings.get(payload.mapping.name);\n        if (mappingState) {\n          mappingState.set(payload.mapping);\n          mappingState.trigger('change:targets');\n        }\n        break;\n      case 'removeMapping':\n        mappings.remove(payload.name);\n        break;\n\n      case 'timelineCommands':\n        router.view.timeline.addEntries(payload.commands);\n        break;\n\n      case 'storageSetupInstalled':\n        router.history.start({\n          root: location.pathname,\n          pushState: false\n        });\n        break;\n\n      case 'storageSave':\n      case 'storageLoad':\n        if (command === 'storageLoad') {\n          mappings.reset(payload.setup.mappings);\n          signals.reset(payload.setup.signals);\n        }\n        router.navigate('/setup/' + payload.setupId, {trigger: false, replace: false});\n        break;\n\n      case 'yamlLoad':\n        mappings.reset(payload.setup.mappings);\n        signals.reset(payload.setup.signals);\n        break;\n      case 'storageKeys':\n        break;\n\n      default:\n        console.info('unrecognized worker command \"%s\"', command);\n    }\n    router.trigger('app:worker:' + command, payload);\n  },\n\n  initialize: function(options) {\n    var router = this;\n\n    router.worker = new LoadedWorker();\n    router.settings = new Settings('vf');\n\n    var screen = router.model = new ScreenState({}, {\n      router: this\n    });\n    var signals = router.signals = new SignalCollection([], {\n      clock: screen.clock\n    });\n\n\n    router.on('all', function(...args) {\n      if (args[0] && args[0].indexOf('app:') === 0) screen.trigger(...args);\n    });\n\n    var mappingContext = {\n      context: {\n        signals: router.signals,\n        layers: screen.layers\n      }\n    };\n    var mappings = router.mappings = new Mappings([], mappingContext);\n\n    router.broadcastChannel = new BroadcastChannel('spike');\n\n    router.broadcastChannel.addEventListener('message', this._handleBroadcastMessages.bind(this));\n\n    router.worker.addEventListener('message', this._handleWorkerMessages.bind(this));\n\n    var midi = router.midi = (router.midi || new MIDIAccessState({}));\n\n    midi.on('midi:change', function(deviceName, property, velocity) {\n      router.sendCommand('midi', {\n        deviceName: deviceName,\n        property: property,\n        velocity: velocity\n      });\n    });\n\n    router.listenTo(midi, 'change:inputs', function() {\n      var _mappings = mappings.length ? mappings.export() : options.mappings || [];\n      if (!_mappings.length) return;\n      router.sendCommand('resetMappings', {\n        mappings: _mappings\n      });\n    });\n\n    router.view = new ControllerView({\n      midi: midi,\n      model: screen,\n      router: router,\n      signals: signals,\n      mappings: router.mappings,\n      el: options.el\n    });\n  },\n\n  sendCommand: function(name, payload, callback) {\n    var worker = this.worker;\n    var message = {\n      command: name,\n      payload: payload\n    };\n\n    function makeListener(id, done) {\n      function eventListener(evt) {\n        if (evt.data.eventId !== id) return;\n        done(null, evt.data.payload);\n        worker.removeEventListener('message', eventListener);\n      }\n      return eventListener;\n    }\n\n    if (callback) {\n      message.eventId = auid();\n      worker.addEventListener('message', makeListener(message.eventId, callback));\n    }\n    worker.postMessage(message);\n  },\n\n\n  routes: {\n    '': 'loadSetup',\n    'setup/:setupId': 'loadSetup',\n    'tour': 'tour',\n    'tour/': 'tour',\n    'tour/:step': 'tour'\n  },\n\n  tour: function(step) {\n    var router = this;\n    var steps = require('./controller/tour/steps')(router.view).map(function(item, i) {\n      item.index = i;\n      return item;\n    });\n\n    function tourReady(err) {\n      if (err) throw err;\n      if (!router.tourView) {\n        router.tourView = new Tour({\n          parent: router,\n          steps: steps,\n          onstepchange: function(step) {\n            router.navigate('tour/' + step.name, {});\n          }\n        });\n        document.body.appendChild(router.tourView.el);\n        router.tourView.update();\n      }\n\n      router.tourView.step = step;\n      router._tourBootstrapped = true;\n    }\n\n    if (router._tourBootstrapped) return tourReady();\n    // load the default setup\n    router.loadSetup(null, tourReady);\n  },\n\n  loadSetup: function(setupId, next) {\n    console.time(setupId);\n\n    var router = this;\n    setupId = setupId || 'local-demo-3d-zeropaper';\n\n    next = typeof next === 'function' ? next : function(){};\n\n    function done(err, setup) {\n      console.timeEnd(setupId);\n      if (err) return next(err);\n      // router.navigate('setup/' + setupId, {replace: false, trigger: false});\n      router.view.getSetupEditor(setup);\n      next();\n    }\n\n    if (setupId.indexOf('local-') === 0) {\n      router._loadLocal(setupId, done);\n    }\n    else {\n      router._loadGist(setupId, done);\n    }\n  },\n\n  _loadLocal: function(setupId, done) {\n    done = typeof done === 'function' ? done : function(err) {\n      if(err) console.error('localforage error', err.message);\n    };\n\n    this.once('app:worker:storageLoad', function(data) {\n      done(data.error, data.setup);\n    });\n\n    this.sendCommand('storageLoad', {setupId: setupId});\n  },\n\n  _loadGist: function(gistId, done) {\n    var gistView = this.view.gistView;\n    var same = gistView.gistId === gistId;\n    gistView.gistId = gistId;\n    if (!same) {\n      gistView._loadGist(function(err, content) {\n        if (err) return done(err);\n        done(null, fromYaml(content));\n      });\n    }\n  }\n});\n\n\nwindow.visualFiha = new AppRouter({\n  el: document.querySelector('.controller')\n});\n\n// ---------------------------------------------------------------\n}, 'controller-deps');\n}, 'screen-state');\n}, 'layer-state');\n}, 'mapping-data');\n}, 'ampersand-view');\n}, 'ampersand-data');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controller-app.js\n// module id = 336\n// module chunks = 3"],"sourceRoot":""}